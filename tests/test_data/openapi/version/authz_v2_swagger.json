{
  "openapi": "3.1.0",
  "info": {
    "title": "Authorization API",
    "description": "Authorization API",
    "version": "2.0.0-alpha"
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Resource Providers",
      "description": "Validations <ul> <li>Attribute 'name' must be unique and be expressed in kebab-case (i.e. compute-service)</li> </ul> Known limitations <ul> <li>This endpoint does not provide pagination</li> <li>There is a max limit of 100 resource providers per application</li> </ul>"
    },
    {
      "name": "Resource Types",
      "description": "Known limitations <ul> <li>This endpoint does not provide pagination</li> <li>There is a max limit of 1000 resource types per resource provider</li> </ul>"
    },
    {
      "name": "Permissions",
      "description": "Known limitations <ul> <li>No Resource Provider should have more than 1000 Permissions.</li> </ul>"
    },
    {
      "name": "Roles",
      "description": "Roles are created in an Organization or Workspace, typically by an IAM administrator. They may be created by a Resource Provider (RP) if the RP has been granted the required privileges in the Organization or Workspace.\n<br><br> Requirements <ul> <li>Roles must include at least one inline permission.</li> <li>ManagedBy field is required for Managed roles.</li> </ul>\nKnown limitations <ul> <li>This endpoint does not provide pagination.</li> </ul>"
    },
    {
      "name": "Predefined Roles",
      "description": "Predefined roles are contributed by Resource Providers and are defined once, available everywhere.\nRequirements <ul> <li>Roles must include at least one inline permission.</li> </ul>\nKnown limitations <ul> <li>This endpoint does not provide pagination.</li> </ul>"
    }
  ],
  "paths": {
    "/authorization/v2alpha1/resource-providers": {
      "post": {
        "summary": "Create a resource provider",
        "tags": [
          "Resource Providers"
        ],
        "operationId": "createResourceProvider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceProvider"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all resource providers",
        "tags": [
          "Resource Providers"
        ],
        "operationId": "listResourceProviders",
        "parameters": [
          {
            "in": "query",
            "name": "application-id",
            "description": "Allows searching for all resource providers owned by this application identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Allows searching for a specific resource provider by its name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceProviderList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a resource provider instance by ID",
        "tags": [
          "Resource Providers"
        ],
        "operationId": "getResourceProvider",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a resource provider instance by ID",
        "tags": [
          "Resource Providers"
        ],
        "operationId": "updateResourceProvider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceProvider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a resource provider instance by ID",
        "tags": [
          "Resource Providers"
        ],
        "operationId": "deleteResourceProvider",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/resource-types": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Create a resource type",
        "tags": [
          "Resource Types"
        ],
        "operationId": "createResourceType",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all resource types",
        "tags": [
          "Resource Types"
        ],
        "operationId": "getResourceTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceTypeList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/resource-types/{id}": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a resource type instance by ID",
        "tags": [
          "Resource Types"
        ],
        "operationId": "getResourceType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                },
                "examples": {
                  "example1": {
                    "$ref": "#/components/examples/resourceTypeVM"
                  },
                  "example2": {
                    "$ref": "#/components/examples/resourceTypeSingleton"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a resource type instance by ID",
        "tags": [
          "Resource Types"
        ],
        "operationId": "updateResourceType",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete resource type instance by ID",
        "tags": [
          "Resource Types"
        ],
        "operationId": "deleteResourceType",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/permissions": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Create a Permission in a Resource Provider",
        "tags": [
          "Permissions"
        ],
        "operationId": "createPermission",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all Permissions from a Resource Provider",
        "description": "<ul> <li>This endpoint does not support pagination at this moment.</li> </ul>",
        "tags": [
          "Permissions"
        ],
        "operationId": "getPermissionList",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Allows searching for a permission by its name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionList"
                },
                "examples": {
                  "emptyPermissionList": {
                    "$ref": "#/components/examples/emptyPermissionList"
                  },
                  "listWithMultiplePermissions": {
                    "$ref": "#/components/examples/multiplePermissionsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/permissions/{id}": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a Permission instance by ID from a Resource Provider",
        "tags": [
          "Permissions"
        ],
        "operationId": "getPermission",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                },
                "examples": {
                  "storageProviderPermission": {
                    "$ref": "#/components/examples/storageProviderPermission"
                  },
                  "bmaasProviderPermission": {
                    "$ref": "#/components/examples/bmaasProviderPermission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a Permission instance by ID from a Resource Provider",
        "tags": [
          "Permissions"
        ],
        "operationId": "putPermission",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permission"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a Permission instance from a Resource Provider",
        "tags": [
          "Permissions"
        ],
        "operationId": "deletePermission",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/roles": {
      "post": {
        "summary": "Create a role",
        "tags": [
          "Roles"
        ],
        "operationId": "createRole",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "customRole": {
                  "$ref": "#/components/examples/customRole"
                },
                "linkedRole": {
                  "$ref": "#/components/examples/linkedRole"
                },
                "managedRole": {
                  "$ref": "#/components/examples/managedRole"
                },
                "roleWithPermissions": {
                  "$ref": "#/components/examples/customRoleOnlyPermission"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all roles",
        "tags": [
          "Roles"
        ],
        "operationId": "getRoles",
        "parameters": [
          {
            "in": "query",
            "name": "managed-by",
            "description": "Filter roles by managedBy attribute. Repeatable.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "grn",
            "description": "Filter role list by Role GRN. Repeatable.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/roles/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a role instance by ID",
        "tags": [
          "Roles"
        ],
        "operationId": "getRole",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a role instance by ID",
        "tags": [
          "Roles"
        ],
        "operationId": "putRole",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a role instance by ID",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRole",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/roles": {
      "post": {
        "summary": "Create a role for a given resource provider",
        "tags": [
          "Predefined Roles"
        ],
        "operationId": "createPredefinedRole",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "description": "Provider identifier.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "roleWithPermissions": {
                  "$ref": "#/components/examples/predefinedRoleOnlyPermission"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all roles for a given resource provider",
        "tags": [
          "Predefined Roles"
        ],
        "operationId": "getPredefinedRoles",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "description": "Provider identifier.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/roles/{roleId}": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "description": "Resource provider identifier.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "roleId",
          "in": "path",
          "required": true,
          "description": "Role identifier.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a role instance by ID from a given resource provider",
        "tags": [
          "Predefined Roles"
        ],
        "operationId": "getPredefinedRole",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a role instance by ID from a given resource provider",
        "tags": [
          "Predefined Roles"
        ],
        "operationId": "putPredefinedRole",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a role instance by ID from a given resource provider",
        "tags": [
          "Predefined Roles"
        ],
        "operationId": "deletePredefinedRole",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/role-assignments": {
      "post": {
        "summary": "Create a role assignment",
        "tags": [
          "Role Assignments"
        ],
        "operationId": "createRoleAssignment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignment"
                },
                "examples": {
                  "resourceInstanceScope": {
                    "$ref": "#/components/examples/roleAssignmentResource"
                  },
                  "resourceInstanceScopeWithCondition": {
                    "$ref": "#/components/examples/roleAssignmentResourceWithCondition"
                  },
                  "resourceGroupScope": {
                    "$ref": "#/components/examples/roleAssignmentResourceGroup"
                  },
                  "managementGroupScope": {
                    "$ref": "#/components/examples/roleAssignmentManagementGroup"
                  },
                  "workspaceScope": {
                    "$ref": "#/components/examples/roleAssignmentWorkspace"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all role assignments",
        "tags": [
          "Role Assignments"
        ],
        "operationId": "getRoleAssignments",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Total number of results to be returned",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Zero-based resource offset to start the response from",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "role-id",
            "description": "Role identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "description": "Fully qualified scope string",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subject-id",
            "description": "Security principal identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignmentList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/role-assignments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Instance identifier",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a role assignment instance by ID",
        "tags": [
          "Role Assignments"
        ],
        "operationId": "getRoleAssignment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a role assignment instance by ID",
        "tags": [
          "Role Assignments"
        ],
        "operationId": "deleteRoleAssignment",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/scope-groups": {
      "post": {
        "summary": "Create a scope group",
        "tags": [
          "Scope Groups"
        ],
        "operationId": "createScopeGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopeGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all scope groups",
        "tags": [
          "Scope Groups"
        ],
        "operationId": "getScopeGroups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeGroupList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/scope-groups/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Instance identifier",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a scope group instance by ID",
        "tags": [
          "Scope Groups"
        ],
        "operationId": "getScopeGroup",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeGroup"
                },
                "examples": {
                  "scopeGroupSingle": {
                    "$ref": "#/components/examples/scopeGroupSingle"
                  },
                  "scopeGroupMultiple": {
                    "$ref": "#/components/examples/scopeGroupMultiple"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a scope group instance by ID",
        "tags": [
          "Scope Groups"
        ],
        "operationId": "updateScopeGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopeGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a scope group instance by ID",
        "tags": [
          "Scope Groups"
        ],
        "operationId": "deleteScopeGroup",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/enforce": {
      "post": {
        "summary": "Enforce",
        "tags": [
          "Enforce"
        ],
        "operationId": "enforce",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnforceRequest"
              },
              "examples": {
                "objectExample": {
                  "$ref": "#/components/examples/enforce"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/enforce-batch": {
      "post": {
        "summary": "Enforce on multiple scopes",
        "tags": [
          "Enforce Batch"
        ],
        "operationId": "enforceBatch",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnforceBatchRequest"
              },
              "examples": {
                "multipleResourcesRequest": {
                  "$ref": "#/components/examples/enforceBatchResources"
                },
                "scopeGroupRequest": {
                  "$ref": "#/components/examples/enforceBatchScopeGroup"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnforceBatchResult"
                },
                "examples": {
                  "multipleResourcesResponse": {
                    "$ref": "#/components/examples/enforceBatchResourcesResponse"
                  },
                  "scopeGroupResponse": {
                    "$ref": "#/components/examples/enforceBatchScopeGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/v1-permission-maps": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "description": "Provider identifier.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Create a v1 permission map for a resource provider",
        "tags": [
          "Permission Maps"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMap"
              },
              "examples": {
                "appCatalogPermissionMap": {
                  "$ref": "#/components/examples/AppCatalogPermissionMap"
                },
                "arubaPermissionMap": {
                  "$ref": "#/components/examples/ArubaPermissionMap"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMapResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Retrieve all v1 permission maps for a resource provider",
        "tags": [
          "Permission Maps"
        ],
        "parameters": [
          {
            "name": "application-resource",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v2-permission",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMapList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/authorization/v2alpha1/resource-providers/{providerId}/v1-permission-maps/{id}": {
      "parameters": [
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "description": "Provider identifier.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a v1 permission map by ID",
        "tags": [
          "Permission Maps"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMapResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update a v1 permission map by ID",
        "tags": [
          "Permission Maps"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMap"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMapResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Delete a v1 permission map by ID",
        "tags": [
          "Permission Maps"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "name": "Authorization",
        "in": "header",
        "type": "apiKey"
      }
    },
    "examples": {
      "AppCatalogPermissionMap": {
        "summary": "App-catalog permission map",
        "value": {
          "v1Permission": {
            "applicationResource": "/ccs/app-catalog/app-review",
            "permission": "ccs.app-catalog.view"
          },
          "v2Permission": "ccs.app-catalog.app-review.view"
        }
      },
      "ArubaPermissionMap": {
        "summary": "Aruba permission map",
        "value": {
          "v1Permission": {
            "applicationResource": "/aruba-central/nms/configuration",
            "permission": "aruba-central.global.view"
          },
          "v2Permission": "aruba-central.nms.configuration.view"
        }
      },
      "resourceTypeVM": {
        "summary": "VM resource type",
        "value": {
          "id": "4ad36853-5da5-4d97-8019-93467dc24db7",
          "type": "iam/authorization/resource-type",
          "slug": "compute-services/hosts/{uuid}/vms/{uuid}",
          "singleInstance": false,
          "allowedScopeTypes": [
            "ORGANIZATION",
            "WORKSPACE"
          ],
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "resourceTypeSingleton": {
        "summary": "A singleton resource type",
        "value": {
          "id": "4ad36853-5da5-4d97-8019-93467dc24db7",
          "type": "iam/authorization/resource-type",
          "slug": "compute-services/hosts/{uuid}/vms/{uuid}",
          "singleInstance": true,
          "allowedScopeTypes": [
            "ORGANIZATION",
            "WORKSPACE"
          ],
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "storageProviderPermission": {
        "summary": "Storage Resource Provider Permission",
        "value": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "type": "iam/authorization/permission",
          "name": "storage.volume.create",
          "releaseStage": "STABLE",
          "customRoleUse": "ALLOW",
          "applicableResourceTypes": [
            "storageservices/storagepool/{uuid}",
            "storageservices/volume/{uuid}"
          ],
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "bmaasProviderPermission": {
        "summary": "BMaaS Resource Provider Permission",
        "value": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "type": "iam/authorization/permission",
          "name": "bare-metal.node.read",
          "releaseStage": "STABLE",
          "customRoleUse": "DENY",
          "applicableResourceTypes": [
            "bmaas/nodes/{uuid}"
          ],
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "emptyPermissionList": {
        "summary": "Empty Permission list",
        "value": {
          "items": [],
          "count": 0,
          "total": 0
        }
      },
      "multiplePermissionsList": {
        "summary": "List with multiple permissions",
        "value": {
          "items": [
            {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "type": "iam/authorization/permission",
              "name": "storage.volume.create",
              "releaseStage": "STABLE",
              "customRoleUse": "ALLOW",
              "applicableResourceTypes": [
                "storageservices/storagepool/{uuid}",
                "storageservices/volume/{uuid}"
              ],
              "generation": 1,
              "createdAt": "2023-04-06T22:45:59.759943+00:00",
              "updatedAt": "2023-04-06T22:45:59.759943+00:00"
            },
            {
              "id": "123e4567-e89b-12d3-a456-426614174002",
              "type": "iam/authorization/permission",
              "name": "storage.volume.delete",
              "releaseStage": "STABLE",
              "customRoleUse": "ALLOW",
              "applicableResourceTypes": [
                "storageservices/storagepool/{uuid}",
                "storageservices/volume/{uuid}"
              ],
              "generation": 1,
              "createdAt": "2023-04-06T22:45:59.759943+00:00",
              "updatedAt": "2023-04-06T22:45:59.759943+00:00"
            }
          ],
          "count": 2,
          "total": 2
        }
      },
      "customRole": {
        "summary": "Custom role",
        "value": {
          "name": "admin",
          "displayName": "Admin",
          "description": "System admin",
          "releaseStage": "ALPHA",
          "kind": "CUSTOM",
          "permissions": [
            "storage.volume.create",
            "compute-services.virtual-machine.delete"
          ],
          "assignableScopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
          ]
        }
      },
      "linkedRole": {
        "summary": "Linked role",
        "value": {
          "name": "storageservices.ThirdPartySystemAdmin",
          "displayName": "Storage Third Party System Admin",
          "description": "Grants user the System Admin role in Third Party System",
          "releaseStage": "ALPHA",
          "kind": "LINKED",
          "linkedRoleRef": "0a9d90e4-e840-4879-abc",
          "assignableScopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
          ]
        }
      },
      "managedRole": {
        "summary": "Managed role",
        "value": {
          "name": "storageservices.LimitedAdmin",
          "displayName": "Storage Limited Admin",
          "description": "Storage Limited Admin",
          "releaseStage": "ALPHA",
          "kind": "MANAGED",
          "managedBy": "storageservices",
          "permissions": [
            "storage.volume.create",
            "hypervisor.vm.edit"
          ],
          "assignableScopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
          ]
        }
      },
      "customRoleOnlyPermission": {
        "summary": "Role with only Permissions",
        "value": {
          "name": "admin",
          "displayName": "Admin",
          "description": "System admin",
          "releaseStage": "ALPHA",
          "kind": "CUSTOM",
          "permissions": [
            "storage.volume.create",
            "compute-services.virtual-machine.delete"
          ],
          "assignableScopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
          ]
        }
      },
      "predefinedRoleOnlyPermission": {
        "summary": "Role with only Permissions",
        "value": {
          "name": "storageservices.LimitedAdmin",
          "displayName": "Storage Limited Admin",
          "description": "Storage Limited Admin",
          "releaseStage": "ALPHA",
          "kind": "PREDEFINED",
          "managedBy": "storageservices",
          "permissions": [
            "storage.volume.create",
            "compute-services.virtual-machine.delete"
          ],
          "assignableScopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
          ]
        }
      },
      "roleAssignmentResource": {
        "summary": "Resource instance scope",
        "value": {
          "id": "05f2523c-fe03-47fc-981b-9c4333a37b01",
          "type": "iam/authorization/role-assignment",
          "subjectId": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123",
          "roleId": "grn:glcp/iam/roles/storageservices.LimitedAdmin",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b70/regions/us-east/resource-providers/compute-ops/firmware-bundles/123",
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "roleAssignmentResourceWithCondition": {
        "summary": "Resource instance scope with condition",
        "value": {
          "id": "05f2523c-fe03-47fc-981b-9c4333a37b01",
          "type": "iam/authorization/role-assignment",
          "subjectId": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123",
          "roleId": "grn:glcp/iam/roles/storageservices.LimitedAdmin",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b70/regions/us-east/resource-providers/compute-ops/firmware-bundles/123",
          "conditions": [],
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "roleAssignmentResourceGroup": {
        "summary": "Resource group scope",
        "value": {
          "id": "05f2523c-fe03-47fc-981b-9c4333a37b01",
          "type": "iam/authorization/role-assignment",
          "subjectId": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123",
          "roleId": "grn:glcp/iam/roles/storageservices.LimitedAdmin",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b70/regions/us-east/resource-providers/compute-ops/resource-groups/123",
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "roleAssignmentManagementGroup": {
        "summary": "Management group scope",
        "value": {
          "id": "05f2523c-fe03-47fc-981b-9c4333a37b01",
          "type": "iam/authorization/role-assignment",
          "subjectId": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123",
          "roleId": "grn:glcp/iam/roles/storageservices.LimitedAdmin",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/management-groups/05f0523c-fd03-47fc-981b-9c4333a37b60",
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "roleAssignmentWorkspace": {
        "summary": "Workspace scope",
        "value": {
          "id": "05f2523c-fe03-47fc-981b-9c4333a37b01",
          "type": "iam/authorization/role-assignment",
          "subjectId": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123",
          "roleId": "grn:glcp/iam/roles/storageservices.LimitedAdmin",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60",
          "generation": 1,
          "createdAt": "2023-04-06T22:45:59.759943+00:00",
          "updatedAt": "2023-04-06T22:45:59.759943+00:00"
        }
      },
      "scopeGroupSingle": {
        "summary": "Single scope",
        "value": {
          "id": "05f0523c-fd03-47fc-981b-9c4333a37b76",
          "type": "iam/authorization/scope-group",
          "name": "group0",
          "description": "This group gives access only to the resource \"virtualmachine/1\"",
          "scopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b80/regions/us-east/resource-providers/vmaas/virtualmachine/1"
          ],
          "generation": 1,
          "createdAt": "2023-05-08T22:40:59.759943+00:00",
          "updatedAt": "2023-05-08T22:40:59.759943+00:00"
        }
      },
      "scopeGroupMultiple": {
        "summary": "Multiple scope",
        "value": {
          "id": "05f0523c-fd03-47fc-981b-9c4333a37b78",
          "type": "iam/authorization/scope-group",
          "name": "group1",
          "description": "This group gives access to scope group \"group0\" and resource \"virtualmachine/2\"",
          "scopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b80/regions/us-east/resource-providers/aruba-central/scope-group/group0",
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b80/regions/us-east/resource-providers/vmaas/virtualmachine/2"
          ],
          "generation": 1,
          "createdAt": "2023-05-08T22:45:59.759943+00:00",
          "updatedAt": "2023-05-08T22:45:59.759943+00:00"
        }
      },
      "enforce": {
        "value": {
          "subject": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b",
          "permission": "storage.volume.create",
          "scope": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502"
        }
      },
      "enforceBatchResources": {
        "summary": "Multiple Resources Request",
        "value": {
          "subject": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b",
          "permission": "storage.volume.create",
          "scopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502",
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/401/volume/501"
          ]
        }
      },
      "enforceBatchScopeGroup": {
        "summary": "Scope Group Request",
        "value": {
          "subject": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b",
          "permission": "storage.volume.create",
          "scopes": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/scope-group/502"
          ]
        }
      },
      "enforceBatchResourcesResponse": {
        "summary": "Multiple Resources Response",
        "value": {
          "subject": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b",
          "permission": "storage.volume.create",
          "allowed": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502"
          ],
          "denied": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/401/volume/501"
          ]
        }
      },
      "enforceBatchScopeGroupResponse": {
        "summary": "Scope Group Response",
        "value": {
          "subject": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b",
          "permission": "storage.volume.create",
          "allowed": [
            "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/scope-group/502"
          ],
          "denied": []
        }
      }
    },
    "schemas": {
      "v1Permission": {
        "type": "object",
        "properties": {
          "applicationResource": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          }
        }
      },
      "PermissionMap": {
        "type": "object",
        "required": [
          "v2Permission",
          "v1Permission"
        ],
        "properties": {
          "v1Permission": {
            "$ref": "#/components/schemas/v1Permission"
          },
          "v2Permission": {
            "type": "string"
          }
        }
      },
      "PermissionMapResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "iam/authorization/permission-map"
          },
          "v1Permission": {
            "$ref": "#/components/schemas/v1Permission"
          },
          "v2Permission": {
            "type": "string"
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "PermissionMapList": {
        "type": "object",
        "required": [
          "items",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionMapResponse"
            }
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "ResourceProvider": {
        "type": "object",
        "required": [
          "id",
          "type",
          "applicationId",
          "name",
          "displayName",
          "releaseStage",
          "availableScopes",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "iam/authorization/provider"
          },
          "applicationId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "compute-services"
          },
          "displayName": {
            "type": "string",
            "example": "Compute Services"
          },
          "description": {
            "type": "string",
            "example": "Compute Services provide compute services"
          },
          "releaseStage": {
            "$ref": "#/components/schemas/ReleaseStage"
          },
          "availableScopes": {
            "$ref": "#/components/schemas/ScopeArray"
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "ResourceProviderList": {
        "type": "object",
        "required": [
          "items",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceProvider"
            }
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "ResourceType": {
        "type": "object",
        "required": [
          "id",
          "type",
          "slug",
          "singleInstance",
          "allowedScopeTypes",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "iam/authorization/resource-types"
          },
          "slug": {
            "type": "string",
            "description": "Must start with the provider identifier, followed by the actual type(s) (i.e. `<providerId>/<type>/{uuid}`). Max nesting depth 3 (i.e. `<providerId>/<type1>/{uuid}/<type2>/{uuid}/<type3>/{uuid}`). The `{uuid}` is a literal string that indicates the ID placeholder. Single Instance resources omit the final `{uuid}` as they do not have instances.",
            "example": "compute-services/hosts/{uuid}"
          },
          "displayName": {
            "type": "string",
            "description": "Brief name for this resource type. If present, the UI may show this name instead of the slug."
          },
          "singleInstance": {
            "description": "Single instance resources are static, non-instantiable and do not use a `{uuid}`. They may represent service features or top-level resources that always exist.",
            "type": "boolean",
            "example": false
          },
          "allowedScopeTypes": {
            "description": "List of scope types where this resource type is used. Typically `\"WORKSPACE\"`.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ORGANIZATION",
                "MANAGEMENT_GROUP",
                "WORKSPACE"
              ]
            },
            "example": [
              "WORKSPACE"
            ]
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "ResourceTypeList": {
        "type": "object",
        "required": [
          "items",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/ResourceType"
            }
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "Permission": {
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "releaseStage",
          "customRoleUse",
          "applicableResourceTypes",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "example": "iam/authorization/permission",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "storage.volume.create",
            "description": "Naming must follow the convention of \\<resource provider\\>.\\<resource type\\>.\\<action\\>. The name must be unique across all Permission names known to AuthZ v2. Name is immutable."
          },
          "description": {
            "type": "string",
            "example": "Create storage volumes"
          },
          "releaseStage": {
            "$ref": "#/components/schemas/ReleaseStage"
          },
          "customRoleUse": {
            "type": "string",
            "enum": [
              "ALLOW",
              "DENY"
            ],
            "example": "ALLOW",
            "description": "Allow or deny usage by a custom Role"
          },
          "applicableResourceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "storageservices/storagepool/{uuid}",
              "storageservices/volume/{uuid}"
            ],
            "minItems": 1,
            "maxItems": 100,
            "description": "List of applicable ResourceTypes"
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "PermissionList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "maxItems": 1000
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "Role": {
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "releaseStage",
          "kind",
          "generation",
          "grn",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "iam/authorization/role"
          },
          "name": {
            "type": "string",
            "description": "Unique name. If it's managed by a provider, the pattern is provider identifier followed by the actual name. (i.e. `<providerId>.<name>`)",
            "example": "storageservices.LimitedAdmin"
          },
          "displayName": {
            "type": "string",
            "description": "Friendly name for user interface.",
            "example": "Storage Limited Admin"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "Storage Limited Admin"
          },
          "releaseStage": {
            "$ref": "#/components/schemas/ReleaseStage"
          },
          "kind": {
            "$ref": "#/components/schemas/Kind",
            "description": "Specifies the type of role"
          },
          "managedBy": {
            "$ref": "#/components/schemas/ManagedBy"
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionIDList",
            "description": "At least one permissions is required, except for `LINKED` roles, which require an `linkedRoleRef` instead of permissions list."
          },
          "linkedRoleRef": {
            "type": "string",
            "description": "Opaque string used to reference a role in another system not managed by AuthZ v2. Required for `LINKED` kind of roles. Not used by other role types."
          },
          "assignableScopes": {
            "$ref": "#/components/schemas/ScopeArray",
            "description": "Indicate the set of scopes where the role can be used to create an assignment"
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "grn": {
            "type": "string",
            "readOnly": true,
            "example": "grn:glcp/iam/roles/storageservices.LimitedAdmin"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "RolesList": {
        "type": "object",
        "required": [
          "items",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "RoleAssignment": {
        "type": "object",
        "required": [
          "id",
          "type",
          "subjectId",
          "scope",
          "roleId",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "example": "iam/authorization/role-assignment",
            "readOnly": true
          },
          "subjectId": {
            "type": "string",
            "description": "Security principal identifier",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/123"
          },
          "roleId": {
            "type": "string",
            "format": "uuid",
            "description": "Role identifier"
          },
          "scope": {
            "type": "string",
            "description": "Fully qualified scope string",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60"
          },
          "conditions": {
            "type": "array",
            "maxItems": 10,
            "description": "List of conditions",
            "items": {
              "type": "object"
            }
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "RoleAssignmentList": {
        "type": "object",
        "required": [
          "items",
          "offset",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignment"
            }
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        }
      },
      "ScopeGroup": {
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "scopes",
          "generation",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "iam/authorization/scope-group"
          },
          "name": {
            "type": "string",
            "example": "group1"
          },
          "description": {
            "type": "string",
            "example": "This group gives access to scope group \"group0\" and resource \"virtualmachine/456\""
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "example": [
              "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/aruba-central/scope-group/group0",
              "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/vmaas/virtualmachine/456"
            ]
          },
          "generation": {
            "$ref": "#/components/schemas/Generation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "ScopeGroupList": {
        "type": "object",
        "required": [
          "items",
          "count",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeGroup"
            },
            "maxItems": 1000
          },
          "count": {
            "$ref": "#/components/schemas/Count"
          },
          "total": {
            "$ref": "#/components/schemas/Total"
          }
        }
      },
      "EnforceRequest": {
        "type": "object",
        "required": [
          "subject",
          "permission",
          "scope"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b"
          },
          "permission": {
            "type": "string",
            "example": "storage.volume.create"
          },
          "scope": {
            "type": "string",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502"
          }
        }
      },
      "EnforceBatchRequest": {
        "type": "object",
        "required": [
          "subject",
          "permission",
          "scopes"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b"
          },
          "permission": {
            "type": "string",
            "example": "storage.volume.create"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502",
              "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/401/volume/501"
            ]
          }
        }
      },
      "EnforceBatchResult": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "example": "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/users/47fc981b"
          },
          "permission": {
            "type": "string",
            "example": "storage.volume.create"
          },
          "allowed": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/502"
              ]
            }
          },
          "denied": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/05f0523c-fd03-47fc-981b-9c4333a37b60/regions/us-east/resource-providers/storageservice/storagepool/402/volume/501"
              ]
            }
          }
        }
      },
      "ScopeArray": {
        "type": "array",
        "maxItems": 100,
        "items": {
          "type": "string"
        },
        "example": [
          "grn:glcp/organizations/05f0523c-fd03-47fc-981b-9c4333a37b70/workspaces/*"
        ]
      },
      "Kind": {
        "type": "string",
        "description": "Determines the type of role. Kind is immutable.",
        "enum": [
          "MANAGED",
          "CUSTOM",
          "PREDEFINED",
          "LINKED"
        ],
        "example": "{kind}"
      },
      "ManagedBy": {
        "type": "string",
        "description": "Indicates the resource provider identifier that manages it. Required if `kind` is one of: `LINKED`, `MANAGED`, `PREDEFINED`",
        "example": "{providerName}"
      },
      "ReleaseStage": {
        "type": "string",
        "enum": [
          "ALPHA",
          "BETA",
          "STABLE",
          "DEPRECATED"
        ],
        "description": "A resource must be on DEPRECATED stage to be deleted.",
        "example": "ALPHA"
      },
      "PermissionIDList": {
        "type": "array",
        "maxItems": 1000,
        "items": {
          "type": "string"
        },
        "example": [
          "storage.volume.create",
          "compute-services.virtual-machine.delete"
        ]
      },
      "UUID": {
        "type": "string",
        "format": "uuid",
        "readOnly": true
      },
      "Count": {
        "type": "integer",
        "example": 1
      },
      "Offset": {
        "type": "integer",
        "example": 0
      },
      "Total": {
        "type": "integer",
        "example": 1
      },
      "Generation": {
        "type": "integer",
        "format": "int64",
        "example": 1,
        "readOnly": true
      },
      "CreatedAt": {
        "type": "string",
        "format": "date-time",
        "example": "2023-04-06T22:45:59.759943+00:00",
        "readOnly": true
      },
      "UpdatedAt": {
        "type": "string",
        "format": "date-time",
        "example": "2023-04-06T22:45:59.759943+00:00",
        "readOnly": true
      },
      "BadRequestError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 400
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_AUTHZ_INVALID_FORMAT"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "Invalid format of field 'foo'"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          },
          "errorDetails": {
            "type": "array",
            "description": "Additional detailed information about the error",
            "items": {
              "type": "object",
              "required": [
                "type",
                "issues"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of error details",
                  "example": "hpe.greenlake.bad_request"
                },
                "issues": {
                  "type": "array",
                  "description": "Array of bad request issues",
                  "items": {
                    "$ref": "#/components/schemas/BadRequestIssues"
                  }
                }
              }
            }
          }
        }
      },
      "BadRequestIssues": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The part of the request with an issue",
            "enum": [
              "field",
              "header",
              "query.parameter"
            ],
            "example": "field"
          },
          "subject": {
            "type": "string",
            "description": "The specific issue key",
            "example": "foo.bar"
          },
          "description": {
            "type": "string",
            "description": "An elaborate description of the issue. This can be used by developers to understand how the failure can be addressed",
            "example": "Invalid format: field 'foo' is incompatible"
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 401
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_AUTHZ_EXPIRED_TOKEN"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "Authentication error"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          }
        }
      },
      "ForbiddenError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 403
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_AUTHZ_BLOCKED_USER"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "Action is blocked for this user"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 404
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_AUTHZ_MISSING_RESOURCE"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "The resource was not found"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          }
        }
      },
      "ConflictError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 409
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_AUTHZ_RESOURCE_LOCKED"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "There is a conflict with the current state of the target resource"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          }
        }
      },
      "InternalError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 500
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_GL_ERROR_INTERNAL_SERVER_ERROR"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "The server encountered an unexpected condition which prevented it from fulfilling the request"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          },
          "errorDetails": {
            "type": "array",
            "description": "Additional detailed information about the error",
            "items": {
              "$ref": "#/components/schemas/RetryData"
            }
          }
        }
      },
      "ServiceUnavailableError": {
        "type": "object",
        "required": [
          "httpStatusCode",
          "errorCode",
          "message",
          "debugId"
        ],
        "properties": {
          "httpStatusCode": {
            "type": "integer",
            "description": "The HTTP equivalent status code",
            "example": 503
          },
          "errorCode": {
            "type": "string",
            "description": "A unique machine-friendly identifier for the error from a global list of enumerated identifier strings",
            "example": "HPE_GL_ERROR_SERVICE_UNAVAILABLE"
          },
          "message": {
            "type": "string",
            "description": "A user-friendly error message",
            "example": "The server is not ready to handle the request"
          },
          "debugId": {
            "$ref": "#/components/schemas/DebugId"
          },
          "errorDetails": {
            "type": "array",
            "description": "Additional detailed information about the error",
            "items": {
              "$ref": "#/components/schemas/RetryData"
            }
          }
        }
      },
      "RetryData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of error details",
            "example": "hpe.greenlake.retry_info"
          },
          "retryAfterSeconds": {
            "type": "integer",
            "description": "Seconds to wait before retrying.",
            "example": 30
          }
        }
      },
      "DebugId": {
        "type": "string",
        "description": "A unique identifier for the instance of this error",
        "example": "12312-123123-123123-1231212"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestError"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConflictError"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalError"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceUnavailableError"
            }
          }
        }
      }
    }
  }
}