{"name": "test_full_pagination[ccs.tac-admin-Getting third page with offset=10, limit=5]", "status": "broken", "statusDetails": {"message": "hpe_ccs_automation_lib.session.core.exceptions.SessionException: Non Retryable error '403' for API 'GET https://mira-default-user-api.ccs.arubathena.com/ui-doorway/ui/v1/applications/provisions?application_id=92e14a96-82a1-431e-9d51-e6a575969627'", "trace": "obj = <library.authz.AuthzUI object at 0x7f89acdd48b0>, args = ()\nkwargs = {'params': {'application_id': '92e14a96-82a1-431e-9d51-e6a575969627'}, 'tuple_response': True, 'url': 'https://mira-default-user-api.ccs.arubathena.com/ui-doorway/ui/v1/applications/provisions'}\nretries = 3, retriable_errors = [500, 501, 502, 503]\n\n    @wraps(func)\n    def decorator(obj, *args, **kwargs):\n        retries = obj.max_retries\n        while(retries):\n            try:\n                if obj.debug == True:\n                    obj._log_request(func, *args, **kwargs)\n>               return func(obj, *args, **kwargs)\n\n/usr/local/lib/ccs-dev/poetry/venvs/hpe-authz-ft-9Ff49KU_-py3.8/lib/python3.8/site-packages/hpe_ccs_automation_lib/session/core/session.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/ccs-dev/poetry/venvs/hpe-authz-ft-9Ff49KU_-py3.8/lib/python3.8/site-packages/hpe_ccs_automation_lib/session/core/session.py:189: in get\n    r.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [403]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 403 Client Error: Forbidden for url: https://mira-default-user-api.ccs.arubathena.com/ui-doorway/ui/v1/applications/provisions?application_id=92e14a96-82a1-431e-9d51-e6a575969627\n\n/usr/local/lib/ccs-dev/poetry/venvs/hpe-authz-ft-9Ff49KU_-py3.8/lib/python3.8/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nmsp_account_session = <library.authz.AuthzUI object at 0x7f89acdd48b0>, real_app = <library.ccs_app.CCSApp object at 0x7f89abf90f40>\nui_host = {'account': {'app_id': '92e14a96-82a1-431e-9d51-e6a575969627', 'app_inst_id': 'cc16ee91-11f3-46cf-ae7f-14ef5bd3d7d6', ...1@345', 'role': 'custom-role', 'user': 'hpemira+less_perm@gmail.com', 'user_less_priv': 'hpemira+priv@gmail.com'}, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def assign_users_to_tenant_account(msp_account_session, real_app, ui_host):\n        application_id = real_app.app_id\n        msp_platform_cid = ui_host[\"msp_platform_cid\"]\n    \n        msp_account_session.load_account(msp_platform_cid)\n    \n>       ui_helpers.provision_app_instance(\n            msp_account_session, application_id, real_app.region\n        )\n\nconftest.py:686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nui_helpers.py:155: in provision_app_instance\n    provision = get_provisioned_application(session, application_id, region)\nui_helpers.py:119: in get_provisioned_application\n    code, res = session.get_provisions({\"application_id\": application_id})\n../library/authz.py:90: in decorated_func\n    code, res = func(*args, **kwargs)\n../library/authz.py:458: in get_provisions\n    resp = self.get(url=url, params=payload, tuple_response=True,)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nobj = <library.authz.AuthzUI object at 0x7f89acdd48b0>, args = ()\nkwargs = {'params': {'application_id': '92e14a96-82a1-431e-9d51-e6a575969627'}, 'tuple_response': True, 'url': 'https://mira-default-user-api.ccs.arubathena.com/ui-doorway/ui/v1/applications/provisions'}\nretries = 3, retriable_errors = [500, 501, 502, 503]\n\n    @wraps(func)\n    def decorator(obj, *args, **kwargs):\n        retries = obj.max_retries\n        while(retries):\n            try:\n                if obj.debug == True:\n                    obj._log_request(func, *args, **kwargs)\n                return func(obj, *args, **kwargs)\n            except HTTPError as e:\n                retriable_errors = getattr(obj, \"retriable_errors\",\n                                           DEFAULT_RETRIABLE_ERRORS)\n                if e.response.status_code in retriable_errors:\n                    obj._log_error_response(e.response)\n                    LOG.warning(f\"Response code : {e.response.status_code}\")\n                    if (\n                        hasattr(obj, \"validate_retriable_response\") and\n                        not obj.validate_retriable_response(e.response)\n                    ):\n                        raise SessionException(\n                            \"Reponse validation failed for API \"\\\n                            f\"'{e.response.request.method} \"\\\n                            f\"{e.response.request.url}' : \"\\\n                            f\"'{e.response.status_code}'\",\n                            e.response\n                        )\n                    else:\n                        retries -= 1\n                        if retries:\n                            LOG.error(f\"Waiting for {obj.retry_timeout} \"\\\n                                      \"seconds before retrying...\")\n                            time.sleep(obj.retry_timeout)\n                            continue\n                        LOG.error(\"Retries exhausted\")\n                        raise SessionException(\n                            f\"Retries exhausted for API \"\\\n                            f\"'{e.response.request.method} \"\\\n                            f\"{e.response.request.url}' : \"\\\n                            f\"'{e.response.status_code}'\",\n                            e.response\n                        )\n                elif e.response.status_code == 401:\n                    obj._log_request_headers(e.response.request)\n                    obj._log_error_response(e.response)\n                    if hasattr(obj, \"refresh_token\") and obj.refresh_token():\n                        LOG.debug(\"Retrying the API after token refresh\")\n                        continue\n                    raise SessionException(\n                        f\"Non Retryable error '{e.response.status_code}' for \"\\\n                        f\"API '{e.response.request.method} \"\\\n                        f\"{e.response.request.url}'\", e.response\n                    )\n                else:\n                    obj._log_error_response(e.response)\n                    LOG.warning(\n                        f\"Non Retryable error '{e.response.status_code}' for \"\\\n                        f\"API '{e.response.request.method} \"\\\n                        f\"{e.response.request.url}'\"\n                    )\n>                   raise SessionException(\n                        f\"Non Retryable error '{e.response.status_code}' for \"\\\n                        f\"API '{e.response.request.method} \"\\\n                        f\"{e.response.request.url}'\", e.response\n                    )\nE                   hpe_ccs_automation_lib.session.core.exceptions.SessionException: Non Retryable error '403' for API 'GET https://mira-default-user-api.ccs.arubathena.com/ui-doorway/ui/v1/applications/provisions?application_id=92e14a96-82a1-431e-9d51-e6a575969627'\n\n/usr/local/lib/ccs-dev/poetry/venvs/hpe-authz-ft-9Ff49KU_-py3.8/lib/python3.8/site-packages/hpe_ccs_automation_lib/session/core/session.py:85: SessionException"}, "parameters": [{"name": "ui_session", "value": "'ccs.tac-admin'"}, {"name": "offset", "value": "10"}, {"name": "expected_users_number", "value": "2"}], "start": 1692741626642, "stop": 1692741626642, "uuid": "bbecc46a-5ff5-4d02-b13b-27571873b7fb", "historyId": "430f58892573dd0fe82377d9bd6f016b", "testCaseId": "8bb95d3661e09e3cf46ede9e1eaa5520", "fullName": "test_users_v2_web.TestWebV2GetUserRoleAssignments#test_full_pagination", "labels": [{"name": "app", "value": "authz"}, {"name": "tag", "value": "TestCaseID('C1349115')"}, {"name": "tag", "value": "Test"}, {"name": "tag", "value": "Plv"}, {"name": "tag", "value": "Regression"}, {"name": "suite", "value": "test_users_v2_web"}, {"name": "subSuite", "value": "TestWebV2GetUserRoleAssignments"}, {"name": "host", "value": "ccs-dev"}, {"name": "thread", "value": "147712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_users_v2_web"}]}